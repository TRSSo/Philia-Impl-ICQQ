import{setTimeout}from"node:timers/promises";import*as Message from"./message.js";export default class ICQQtoPhilia{impl;static event=[`system.login.qrcode`,`system.login.slider`,`system.login.device`,`system.login.auth`,`system.login.error`,`system.offline`,`system.online`,`message.private`,`message.group`,`request.friend`,`request.group`];constructor(e){this.impl=e;for(let t of ICQQtoPhilia.event)e.client.on(t,this[t].bind(this))}async"system.login.qrcode"(t){for(this.impl.manager.notice.set(`扫码登录`,`扫码登录：${t.image}`);;){await setTimeout(3e3);let{retcode:t}=await this.impl.client.queryQrcodeResult();switch(t){case 0:return this.impl.client.qrcodeLogin();case 17:return this.impl.manager.notice.set(`登录错误`,`二维码已过期`);case 54:return this.impl.manager.notice.set(`登录错误`,`扫码登录取消`)}}}async handleLoginDevice(e){e===`1`?(await this.impl.client.sendSmsCode(),this.impl.manager.notice.set(`短信验证`,`短信已发送，请输入验证码`,e=>{this.impl.client.submitSmsCode(e)},!0)):this.impl.client.login()}"system.login.slider"(e){this.impl.manager.notice.set(`滑动验证`,`Bot 与浏览器处于同一网络下推荐网页，否则网页反代
网页反代验证：输入1
网页验证：输入2
手动验证：输入得到的ticket
`+e.url,t=>{this.handleLoginSlider(e,t)},!0)}async handleLoginSlider(t,n){let r={};switch(n){case`1`:{let e=new WebSocket(this.impl.config.slider),n=t=>{this.impl.logger.debug(`发送 ${this.impl.config.slider}`,t),e.send(JSON.stringify(t))},i;r.ticket=()=>{if(i instanceof Error)throw i;return i},r.close=e.close.bind(e),e.onclose=()=>{this.impl.logger.debug(`连接关闭 ${this.impl.config.slider}`),i??=Error(`连接关闭 ${this.impl.config.slider}`)},e.onerror=e=>{this.impl.logger.debug(`连接错误 ${this.impl.config.slider}`,e),i??=Error(`连接错误 ${this.impl.config.slider}`,{cause:e}),r.close()},e.onopen=()=>{n({type:`register`,payload:{url:t.url}}),this.impl.manager.notice.set(`滑动验证地址`,String(this.impl.config.slider))},e.onmessage=async e=>{try{let t=JSON.parse(e.data);switch(this.impl.logger.debug([`收到 ${t.payload.ticket}`,t]),t.type){case`ticket`:i=t.payload.ticket,r.close();break;case`handle`:{let{url:e,...r}=t.payload,i=await fetch(e,r);t.payload={result:Buffer.from(await i.arrayBuffer()).toString(`base64`),headers:Object.fromEntries(i.headers.entries())},n(t);break}default:this.impl.logger.info(t)}}catch(e){this.impl.logger.error(e)}};break}case`2`:await fetch(this.impl.config.slider,{method:`POST`,headers:{"Content-Type":`application/json`},body:JSON.stringify({url:t.url})}),this.impl.manager.notice.set(`滑动验证地址`,String(this.impl.config.slider)),r.ticket=async()=>{let e=await(await fetch(this.impl.config.slider,{method:`POST`,headers:{"Content-Type":`application/json`},body:JSON.stringify({submit:this.impl.config.uin})})).json();return e.data?.ticket};break;default:return this.impl.client.submitSlider(n)}try{for(let t=0;t<60;t++){await setTimeout(3e3);let t=await r.ticket();if(t)return this.impl.client.submitSlider(t)}}catch(e){return this.impl.logger.error(e),this.impl.manager.notice.set(`登录错误`,`滑动验证错误`)}return r.close&&r.close(),this.impl.manager.notice.set(`登录错误`,`滑动验证超时`)}"system.login.device"(e){this.impl.manager.notice.set(`设备锁验证`,`请选择设备锁验证方式\n短信验证：输入1\n扫码验证：扫码完成后，输入2\n${e.url}`,e=>{this.handleLoginDevice(e)},!0)}"system.login.auth"(e){this.impl.manager.notice.set(`身份验证`,`请完成身份验证后，继续登录\n${e.url}`,()=>{this.impl.client.login()})}"system.login.error"(e){this.impl.manager.notice.set(`登录错误`,`${e.message}(${e.code})\n`)}"system.offline"(e){return this.impl.manager.notice.set(`账号下线`,e.message),this.impl.philia.stop()}"system.online"(){return this.impl.philia.start()}async PrivateMessage(e){let n=await new Message.ICQQtoPhilia(this.impl,e).convert(),r={raw:{...e},id:e.message_id,type:`message`,time:e.time,scene:`user`,user:this.impl.handle._convertUserInfo(e.sender),message:n.after,summary:n.summary};return e.from_id===this.impl.client.uin&&(r.is_self=!0),r}async"message.private"(e){return this.impl.event_handle.handle(await this.PrivateMessage(e))}async GroupMessage(e){let n=await new Message.ICQQtoPhilia(this.impl,e).convert(),r={raw:{...e},id:e.message_id,type:`message`,time:e.time,scene:`group`,user:await this.impl.handle.getGroupMemberInfo({id:String(e.group_id),uid:String(e.sender.user_id)}),group:await this.impl.handle.getGroupInfo({id:String(e.group_id)}),message:n.after,summary:n.summary};return r}async"message.group"(e){return this.impl.event_handle.handle(await this.GroupMessage(e))}async Message(e){return this[`${e.message_type===`private`?`Private`:`Group`}Message`](e)}async ForwardMessage(e){let n=await new Message.ICQQtoPhilia(this.impl,e).convert(),r={message:n.after,summary:n.summary,time:e.time,user:{name:e.nickname}};return r}async FriendRequest(e){let t={raw:{...e},id:`friend|${e.flag}`,type:`request`,time:e.time,scene:`user_${e.sub_type}`,user:await this.impl.handle.getUserInfo({id:String(e.user_id)}),state:`pending`,reason:e.comment};return t}async"request.friend"(e){return this.impl.event_handle.handle(await this.FriendRequest(e))}async GroupRequest(e){let t={raw:{...e},id:`group|${e.flag}`,type:`request`,time:e.time,scene:`group_${e.sub_type}`,user:await this.impl.handle.getUserInfo({id:String(e.user_id)}),group:await this.impl.handle.getGroupInfo({id:String(e.group_id)}),state:`pending`};return e.sub_type===`add`&&(e.comment&&(t.reason=e.comment),e.inviter_id&&(t.target=await this.impl.handle.getUserInfo({id:String(e.user_id)}),t.user=await this.impl.handle.getUserInfo({id:String(e.inviter_id)}))),t}async"request.group"(e){return this.impl.event_handle.handle(await this.GroupRequest(e))}}